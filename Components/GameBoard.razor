@using DiamondDealer.Objects

<div class="board-container" @ref="MyBorad" tabindex="0" @onkeydown="KeyDown">
    @if (Board is not null)
        @for (int i = 0; i < RowsLength; i++)
            for (int j = 0; j < ColumnsLength; j++)
            {
    <div class="board-spot">
        <!--Factory-->


        @switch (Board[i, j].SpotTypes)
        {
            case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or  SpotTypes.Calculator:
                var site = Board[i, j].CustomeCast(Board[i, j].SpotTypes);
                <img class="spot-img-dealer" src="@(site.Image)" />

                if (site.IsItem)
                {
                    <img class="spot-img-dealer" src="@(site.Item.Image)" />
                }

                if (site.IsCurrentPostion)
                {
                    if (site.IsItemDealer)
                    {
                        <img class="spot-img-dealer" src="@(site.ItemDealer.Image)" />
                    }
                    <img class="spot-img-dealer" src="@(site.ImageDealer)" />
                }
                break;

            case SpotTypes.Dealer:
                var dealer = Board[i, j].Cast<Dealer>();
                if (dealer.IsItem)
                {
                    <img class="spot-img-dealer" src="@(dealer.Item.Image)" />
                }
                <img class="spot-img-dealer" src="@(dealer.Image)" />
                break;

            case SpotTypes.Spot:
                break;

            default: break;
        }




    </div>
            }


</div>
@code {
    [Parameter]
    public int RowsLength { get; set; }
    [Parameter]
    public int ColumnsLength { get; set; }

    /// <summary>
    /// bool: at postion ,  string: url png , object: { kind: of object , what: is  , functions: helper}
    /// </summary>
    Spot[,] Board;

    protected ElementReference MyBorad;

    (int X, int Y) CurrentPostion;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        Board = new Spot[RowsLength, ColumnsLength].InitializeArray();

        CurrentPostion = (RowsLength - 1, ColumnsLength / 2);

        var initDealer = Board[CurrentPostion.X, CurrentPostion.Y];
        initDealer.SpotTypes = SpotTypes.Dealer;
        initDealer.Content = new Dealer()
        {
            Image = DealerImages.Top.GetUrlImage(),
            IsCurrentPostion = true,

        };

        var initCrystalMine = Board[4, 0];
        initCrystalMine.SpotTypes = SpotTypes.CrystalMine;
        initCrystalMine.Content = new CrystalMine(1)
        {
            Image = "/image/crystalmine1.png",
            Item=new Item() {  ModelImages=ModelImages.Seven}
        };

        //color
        initCrystalMine = Board[3, 0];
        initCrystalMine.SpotTypes = SpotTypes.CrystalMine;
        initCrystalMine.Content = new CrystalMine(1)
        {
            Image = "/image/crystalmine2.png",
        };

        initCrystalMine = Board[2, 0];
        initCrystalMine.SpotTypes = SpotTypes.CrystalMine;
        initCrystalMine.Content = new CrystalMine(0)
        {
            Image = "/image/crystalmine1.png",
        };







        initCrystalMine = Board[2, 4];
        initCrystalMine.SpotTypes = SpotTypes.Factory;
        initCrystalMine.Content = new Factory()
        {
            Image = "/image/factory.png",
        };

        initCrystalMine = Board[3, 4];
        initCrystalMine.SpotTypes = SpotTypes.Factory;
        initCrystalMine.Content = new Factory()
        {
            Image = "/image/factory.png",
        };


        initCrystalMine = Board[4, 4];
        initCrystalMine.SpotTypes = SpotTypes.Factory;
        initCrystalMine.Content = new Factory()
        {
            Image = "/image/packaging.png",
        };


        initCrystalMine = Board[6, 0];
        initCrystalMine.SpotTypes = SpotTypes.Storage;
        initCrystalMine.Content = new Storage()
        {
            Image = "/image/storage.png",
            Items = { new Item() {ModelImages=ModelImages.Four},
                new Item() { ModelImages = ModelImages.Ten },
            new Item() { ModelImages = ModelImages.Nine },
            new Item() { ModelImages = ModelImages.Nine },}
        };




        initCrystalMine = Board[0, 2];
        initCrystalMine.SpotTypes = SpotTypes.Customer;
        initCrystalMine.Content = new Customer()
        {
            Image = "/image/customer.png",
        };


        initCrystalMine = Board[1, 0];
        initCrystalMine.SpotTypes = SpotTypes.Police;
        initCrystalMine.Content = new Police()
        {
            Image = "/image/police.png",
        };


        initCrystalMine = Board[6, 4];
        initCrystalMine.SpotTypes = SpotTypes.Calculator;
        initCrystalMine.Content = new Calculator()
        {
            Image = "/image/calculator.png",
        };


        return base.OnParametersSetAsync();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await MyBorad.FocusAsync();
            //  await JSRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
        }
    }

    private void KeyDown(KeyboardEventArgs e)
    {
        var CurrentPostionOld = CurrentPostion;
        Spot siteOld = Board[CurrentPostion.X, CurrentPostion.Y];

        if (e.Key == " " && siteOld.SpotTypes == SpotTypes.CrystalMine)
        {
            var _Crystal= siteOld.Cast<CrystalMine>();
            if ( _Crystal.IsItem && !_Crystal.IsItemDealer)
            {
                _Crystal.ItemDealer = _Crystal.Item;
                _Crystal.Item = default;
            }
        }

        if (e.Key == " " && siteOld.SpotTypes == SpotTypes.Factory)
        {
            var _Crystal = siteOld.Cast<Factory>();
            if (!_Crystal.IsItem && _Crystal.IsItemDealer)
            {
                _Crystal.Item = _Crystal.ItemDealer;
                _Crystal.ItemDealer = default;
            }
        }


        if (e.Key == " " && siteOld.SpotTypes == SpotTypes.Storage)
        {
            var _Crystal = siteOld.Cast<Storage>();
            if ( _Crystal.IsItemDealer)
            {
                _Crystal.Items.Add(_Crystal.ItemDealer);
                _Crystal.ItemDealer = default;
            }else if(_Crystal.IsItem)
            {
                _Crystal.ItemDealer = _Crystal.Items.Dequeue();
            }
        }



        CurrentPostion = e.Key switch
        {
            ("w" or "ص") when CurrentPostion.X != 0 => (--CurrentPostion.X, CurrentPostion.Y),
            ("s" or "س") when CurrentPostion.X != RowsLength-1 => (++CurrentPostion.X, CurrentPostion.Y),
            ("a" or "ش") when CurrentPostion.Y != 0 => (CurrentPostion.X, --CurrentPostion.Y),
            ("d" or "ي") when CurrentPostion.Y != ColumnsLength-1 => (CurrentPostion.X, ++CurrentPostion.Y),
            " " or _ => (CurrentPostion.X, CurrentPostion.Y)
        };


        if (CurrentPostionOld == CurrentPostion)
            return;

        Spot siteNew = Board[CurrentPostion.X, CurrentPostion.Y];


        switch(siteNew.SpotTypes)
        {
            case SpotTypes.Spot:

                switch (siteOld.SpotTypes) {

                    case SpotTypes.Dealer:
                        var dealer = siteOld.Cast<Dealer>();

                        siteNew.SpotTypes = SpotTypes.Dealer;
                        siteNew.Content = new Dealer()
                        {
                            Image = ExtensionMethods.GetUrlDealer(e.Key, dealer.Image),
                            Item=dealer.Item,
                            IsCurrentPostion = true,
                        };

                        siteOld.Content = default;
                        siteOld.SpotTypes= SpotTypes.Spot;

                        break;

                    case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or  SpotTypes.Calculator:

                        var dealerPart = siteOld.Cast<Dealer>();

                        siteNew.SpotTypes = SpotTypes.Dealer;
                        siteNew.Content = new Dealer()
                        {
                            Image = ExtensionMethods.GetUrlDealer(e.Key, dealerPart.Image),
                            Item = dealerPart.Item,
                            IsCurrentPostion = true,
                        };

                        dealerPart.IsCurrentPostion = false;
                        dealerPart.Image = default(string);
                        dealerPart.Item = default(Item);

                        break;

                    default:
                        break;
                }

                break;

            case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or  SpotTypes.Calculator:

                switch (siteOld.SpotTypes)
                {
                    case SpotTypes.Dealer:
                        var crystalMine= siteNew.Cast<Dealer>();
                        var dealer = siteOld.Cast<Dealer>();

                        crystalMine.Image=ExtensionMethods.GetUrlDealer(e.Key, dealer.Image);

                        crystalMine.Item = dealer.Item;
                        crystalMine.IsCurrentPostion = true;

                        siteOld.SpotTypes = SpotTypes.Spot;
                        siteOld.Content = default;

                        break;


                    case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or  SpotTypes.Calculator:

                        var crystalMineNew = siteNew.Cast<Dealer>();
                        var crystalMineOld = siteOld.Cast<Dealer>();


                        crystalMineNew.Image =ExtensionMethods.GetUrlDealer(e.Key, crystalMineOld.Image);
                        crystalMineNew.Item = crystalMineOld.Item;
                        crystalMineNew.IsCurrentPostion = true;


                        crystalMineOld.Item = default(Item);
                        crystalMineOld.Image = default;
                        crystalMineOld.IsCurrentPostion = false;


                        break;

                    default:
                        break;
                }

                break;

            default:
                break;
        }


        Console.WriteLine($"Pressed: [{e.Key}]  Postion: [{CurrentPostion.ToString()}] ");
    }

}
