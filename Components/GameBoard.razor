@using DiamondDealer.Objects


@if (Board is not null)
{
    <ol class="images">
        @foreach (var item in Board[0, 2].Cast<Customer>().Items.Skip(1))
        {
            <li> <img src="@item.Image" /></li>
        }
    </ol>

    <div class="board-container" @ref="MyBorad" tabindex="0" @onkeydown="KeyDown">
        @if (Board is not null)
            @for (int i = 0; i < RowsLength; i++)
                for (int j = 0; j < ColumnsLength; j++)
                {
                    <div class="board-spot">
                        <!--Factory-->


                        @switch (Board[i, j].SpotTypes)
                        {
                            case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or SpotTypes.Calculator:
                                var site = Board[i, j].CustomeCast(Board[i, j].SpotTypes);
                                <img class="spot-img-dealer" src="@(site.Image)" />

                                if (Board[i, j].SpotTypes == SpotTypes.Factory)
                                {
                                    var fac = (Factory)site;
                                    foreach (var item in fac.InItems.OrderBy(x => x.ModelImages))
                                    {
                                        <img class="spot-img-dealer" src="@(item.Image)" />
                                    }
                                }

                                if (site.IsItem)
                                {
                                    <img class="spot-img-dealer" src="@(site.Item.Image)" />
                                }

                                if (site.IsCurrentPostion)
                                {
                                    if (site.IsItemDealer)
                                    {
                                        <img class="spot-img-dealer" src="@(site.ItemDealer.Image)" />
                                    }
                                    <img class="spot-img-dealer" src="@(site.ImageDealer)" />
                                }
                                break;

                            case SpotTypes.Dealer:
                                var dealer = Board[i, j].Cast<Dealer>();
                                if (dealer.IsItem)
                                {
                                    <img class="spot-img-dealer" src="@(dealer.Item.Image)" />
                                }
                                <img class="spot-img-dealer" src="@(dealer.Image)" />
                                break;

                            case SpotTypes.Spot:
                                break;

                            default: break;
                        }




                    </div>
                }


    </div>
}
else
{
    <p> Game is ready... </p>
}


@code {

    #region -   Properties   -

    [Parameter]
    public int RowsLength { get; set; }
    [Parameter]
    public int ColumnsLength { get; set; }

    [Parameter]
    public EventCallback OnLogger { get; set; }

    Spot[,] Board;

    protected ElementReference MyBorad;

    (int X, int Y) CurrentPostion;

    public bool IsParametersSet { get; set; }

    #endregion

    #region -   Initializ   -

    protected override Task OnInitializedAsync()
    {
        GameLogger.Log<Objects.ConsoleLog>($"{nameof(OnInitializedAsync)}");
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        if (!IsParametersSet)
        {
            Board = new Spot[RowsLength, ColumnsLength].InitializeArray();
            CurrentPostion = (RowsLength - 1, ColumnsLength / 2);

            DiamondDealer.Objects.Board.Initialize(Board, () =>
            {
                StateHasChanged();
                GameLogger.Log<Objects.ConsoleLog>($"Action from spot");
            });

            IsParametersSet = true;

            GameLogger.Log<Objects.ConsoleLog>($"{nameof(IsParametersSet)}:{IsParametersSet}");
        }
        GameLogger.Log<Objects.ConsoleLog>($"{nameof(OnParametersSetAsync)}");
        return base.OnParametersSetAsync();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await MyBorad.FocusAsync();
            GameLogger.Log<Objects.ConsoleLog>($"MyBorad.Focus {nameof(firstRender)}");
            //  await JSRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
        }
     //   GameLogger.Log<Objects.ConsoleLog>($"{nameof(OnAfterRenderAsync)}");

    }


    #endregion

    #region -   Action   -

    private void KeyDown(KeyboardEventArgs e)
    {
        GameLogger.Log<Objects.ConsoleLog>($"{nameof(KeyDown)} Pressed: [{e.Key}]");

        var CurrentPostionOld = CurrentPostion;
        Spot siteOld = Board[CurrentPostion.X, CurrentPostion.Y];

        siteOld.EnableSpace(e.Key);

        CurrentPostion.GetNextPosstion(e.Key, RowsLength, ColumnsLength);

        if (CurrentPostionOld == CurrentPostion)
        {
            GameLogger.Log<Objects.ConsoleLog>($"{nameof(KeyDown)} Pressed: Same last CurrentPostion");
            return;
        }

        Spot siteNew = Board[CurrentPostion.X, CurrentPostion.Y];

        GameLogger.Log<Objects.ConsoleLog>($"{nameof(KeyDown)} Pressed: new {CurrentPostion}");

        EnableMove(e.Key,siteOld, siteNew);

        GameLogger.Log<Objects.ConsoleLog>($"Pressed: [{e.Key}]  Postion: [{CurrentPostion.ToString()}]");
    }

    #endregion

    #region -   Methods   -

    private void EnableMove(string key , Spot siteOld, Spot siteNew)
    {
        GameLogger.Log<Objects.ConsoleLog>($"{nameof(EnableMove)} Move:  {siteNew.SpotTypes} - {siteOld.SpotTypes}");

        switch (siteNew.SpotTypes)
        {
            case SpotTypes.Spot:
                var dealer = siteOld.Cast<Dealer>();
                siteNew.SpotTypes = SpotTypes.Dealer;
                siteNew.Content = new Dealer()
                {
                    Image = ExtensionMethods.GetUrlDealer(key, dealer.Image),
                    Item = dealer.Item,
                    IsCurrentPostion = true,
                };

                switch (siteOld.SpotTypes)
                {
                    case SpotTypes.Dealer:
                        siteOld.Content = default;
                        siteOld.SpotTypes = SpotTypes.Spot;
                        break;

                    case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or SpotTypes.Calculator:
                        dealer.IsCurrentPostion = false;
                        dealer.Image = default(string);
                        dealer.Item = default(Item);
                        break;

                    default:
                        break;
                }

                break;

            case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or SpotTypes.Calculator:

                var _siteNew = siteNew.Cast<Dealer>();
                var _siteOld = siteOld.Cast<Dealer>();
                _siteNew.Image = ExtensionMethods.GetUrlDealer(key, _siteOld.Image);
                _siteNew.Item = _siteOld.Item;
                _siteNew.IsCurrentPostion = true;

                switch (siteOld.SpotTypes)
                {
                    case SpotTypes.Dealer:
                        siteOld.SpotTypes = SpotTypes.Spot;
                        siteOld.Content = default;
                        break;
                    case SpotTypes.CrystalMine or SpotTypes.Factory or SpotTypes.Storage or SpotTypes.Customer or SpotTypes.Police or SpotTypes.Calculator:
                        _siteOld.Item = default(Item);
                        _siteOld.Image = default;
                        _siteOld.IsCurrentPostion = false;
                        break;

                    default:
                        break;
                }

                break;

            default:
                break;
        }

        GameLogger.Log<Objects.ConsoleLog>($"{nameof(EnableMove)} To:  {siteNew.SpotTypes} - {siteOld.SpotTypes}");

    }

    #endregion

}
